import lxml.etree as ET

import tkinter as tk
from tkinter import filedialog

from openpyxl import load_workbook

di = {
    "Оказание первой помощи пострадавшим": "1",
    "Использование (применение) средств индивидуальной защиты": "2",
    "Общие вопросы охраны труда и функционирования системы управления охраной труда": "3",
    "Безопасные методы и приемы выполнения работ при воздействии вредных и (или) опасных производственных факторов, источников опасности, идентифицированных в рамках специальной оценки условий труда и оценки профессиональных рисков": "4",
    "Безопасные методы и приемы выполнения земляных работ": "6",
    "Безопасные методы и приемы выполнения ремонтных, монтажных и демонтажных работ зданий и сооружений": "7",
    "Безопасные методы и приемы выполнения работ при размещении, монтаже, техническом обслуживании и ремонте технологического оборудования (включая технологическое оборудование)": "8",
    "Безопасные методы и приемы выполнения работ на высоте": "9",
    "Безопасные методы и приемы выполнения пожароопасных работ": "10",
    "Безопасные методы и приемы выполнения работ в ограниченных и замкнутых пространствах (ОЗП)": "11",
    "Безопасные методы и приемы выполнения строительных работ, в том числе: - окрасочные работы - электросварочные и газосварочные работы": "12",
    "Безопасные методы и приемы выполнения работ, связанных с опасностью воздействия сильнодействующих и ядовитых веществ": "13",
    "Безопасные методы и приемы выполнения газоопасных работ": "14",
    "Безопасные методы и приемы выполнения огневых работ": "15",
    "Безопасные методы и приемы выполнения работ, связанные с эксплуатацией подъемных сооружений": "16",
    "Безопасные методы и приемы выполнения работ, связанные с эксплуатацией тепловых энергоустановок": "17",
    "Безопасные методы и приемы выполнения работ в электроустановках": "18",
    "Безопасные методы и приемы выполнения работ, связанные с эксплуатацией сосудов, работающих под избыточным давлением": "19",
    "Безопасные методы и приемы обращения с животными": "20",
    "Безопасные методы и приемы при выполнении водолазных работ": "21",
    "Безопасные методы и приемы работ по поиску, идентификации, обезвреживанию и уничтожению взрывоопасных предметов": "22",
    "Безопасные методы и приемы работ в непосредственной близости от полотна или проезжей части эксплуатируемых автомобильных и железных дорог": "23",
    "Безопасные методы и приемы работ, на участках с патогенным заражением почвы": "24",
    "Безопасные методы и приемы работ по валке леса в особо опасных условиях": "25",
    "Безопасные методы и приемы работ по перемещению тяжеловесных и крупногабаритных грузов при отсутствии машин соответствующей грузоподъемности и разборке покосившихся и опасных (неправильно уложенных) штабелей круглых лесоматериалов": "26",
    "Безопасные методы и приемы работ с радиоактивными веществами и источниками ионизирующих излучений": "27",
    "Безопасные методы и приемы работ с ручным инструментом, в том числе с пиротехническим": "28",
    "Безопасные методы и приемы работ в театрах": "29"
}


# Функция создания xml
def create_xml(r):
    # Создаем XML-элементы в соответствии с заданной схемой
    registry_set = ET.Element('RegistrySet')

    const_date = ''  # Дата проверки знаний
    const_n_prot = ''  # номер протокола проверки знаний

    # Перебор строк в excel
    for row in r.iter_rows(min_row=2):

        # Проверка условия на наличие имени в строке и проверка на загруженный протокол
        if row[3].value: # and not row[10].value:

            # Специальные условия для получения констант
            if row[0].value:
                const_date = row[0].value
            if row[1].value:
                const_n_prot = row[1].value

            # Создание общего обьекта
            registry_record = ET.SubElement(registry_set, 'RegistryRecord')

            # Создание работника
            worker = ET.SubElement(registry_record, 'Worker')

            # Разбитие фио на Ф И О
            fio = row[3].value.split()

            last_name = ET.SubElement(worker, 'LastName')
            last_name.text = fio[1]

            first_name = ET.SubElement(worker, 'FirstName')
            first_name.text = fio[0]

            middle_name = ET.SubElement(worker, 'MiddleName')
            middle_name.text = fio[2]

            # СНИЛС
            snils = ET.SubElement(worker, 'Snils')
            snils.text = row[5].value

            # Рабочее место
            position = ET.SubElement(worker, 'Position')
            position.text = row[4].value

            # ИНН организации
            employer_inn = ET.SubElement(worker, 'EmployerInn')
            employer_inn.text = str(row[7].value)

            # Наименование организации
            employer_title = ET.SubElement(worker, 'EmployerTitle')
            employer_title.text = row[6].value

            # Создание объекта организации
            organization = ET.SubElement(registry_record, 'Organization')
            inn = ET.SubElement(organization, 'Inn')
            inn.text = '3123356468'  # Наш ИНН

            title = ET.SubElement(organization, 'Title')
            title.text = 'ООО "АТМ"'  # Наше название

            if row[8].value == 'удовлетворительно':
                res_ob = 'true'
            else:
                res_ob = 'false'

            prog_ob = di[row[9].value]

            # Создаем обьект тест, указываем результат тестирования и номер программы обучения
            test = ET.SubElement(registry_record, 'Test', isPassed=res_ob, learnProgramId=prog_ob)

            # Создаем обьект даты и заполняем
            date = ET.SubElement(test, 'Date')
            date.text = f'{str(const_date).split()[0]}+03:00'

            # Создаем обьект протокола
            protocol_number = ET.SubElement(test, 'ProtocolNumber')
            protocol_number.text = const_n_prot

            # Указываем название программы обучния
            learn_program_title = ET.SubElement(test, 'LearnProgramTitle')
            learn_program_title.text = row[9].value

    # Создаем документ на основе элементов
    xml_doc = ET.ElementTree(registry_set)

    try:
        # Выбираем наименование файла
        file_path = filedialog.asksaveasfilename(defaultextension=".xml", filetypes=[("xml files", "*.xml"), ("All files", "*.*")])

        # Сохраняем документ в файл
        xml_doc.write(file_path, pretty_print=True, xml_declaration=True, encoding='utf-8')
    except OSError:
        return


# Создаем функцию для обработки нажатия на кнопку
def button_click():
    # Путь к файлу
    path = fr'\\192.168.10.10\учебный центр\Учеба\Журналы'

    # Загружаем книгу
    wb = load_workbook(filename=f'{path}\\Журнал регистрации удостоверений АТМ ДОТ 2023.xlsx')

    # Выбираем необходимую страницу
    sheet = wb['с 01.03.2023']

    # Вызываем функцию создания XML
    create_xml(sheet)


if __name__ == '__main__':
    # Создаем окно
    window = tk.Tk()

    # Устанавливаем заголовок окна
    window.title("XML")

    # Устанавливаем белый фон для окна
    window.configure(background='white')

    # Устанавливаем размеры окна
    window.geometry("300x200")

    # Создаем фрейм и размещаем его на форме
    frame = tk.Frame(window, bg='#ffffff')
    frame.place(relx=0.5, rely=0.5, anchor='center')

    # Создаем кнопку и размещаем ее на фрейме
    button = tk.Button(frame, text="Сформировать XML", command=button_click, fg='#ffffff', bg='#4CAF50', relief='flat',
                       activebackground='#2E7D32', font=('Arial', 14))
    button.pack(pady=20, padx=40)

    # Запускаем главный цикл обработки событий
    window.mainloop()
